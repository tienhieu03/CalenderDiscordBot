import discord
from discord.ext import commands
import asyncio
from datetime import datetime, timedelta
import importlib.util
import sys
import os
from pathlib import Path
from calendar_manager import CalendarManager
from config import DISCORD_TOKEN, COMMAND_PREFIX
from database import DatabaseManager
from scheduler import SchedulerManager
from discord.ui import Select, View, Button

class ContinueDeleteView(View):
    def __init__(self, bot, ctx):
        super().__init__(timeout=30)
        self.bot = bot
        self.ctx = ctx
        
        # Th√™m n√∫t C√≥
        self.yes_button = Button(
            label="C√≥",
            style=discord.ButtonStyle.green,
            emoji="‚úÖ"
        )
        self.yes_button.callback = self.yes_callback
        self.add_item(self.yes_button)
        
        # Th√™m n√∫t Kh√¥ng
        self.no_button = Button(
            label="Kh√¥ng",
            style=discord.ButtonStyle.red,
            emoji="‚ùå"
        )
        self.no_button.callback = self.no_callback
        self.add_item(self.no_button)
    
    async def yes_callback(self, interaction: discord.Interaction):
        await interaction.message.delete()  # X√≥a message h·ªèi
        # T·∫°o l·∫°i menu x√≥a s·ª± ki·ªán m·ªõi
        await self.bot.get_command('del').callback(self.ctx)
    
    async def no_callback(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚úÖ Ho√†n t·∫•t x√≥a s·ª± ki·ªán",
            color=discord.Color.green()
        )
        await interaction.response.edit_message(embed=embed, view=None)

class DeleteView(View):
    def __init__(self, events, calendar_manager, db_manager, scheduler, bot, ctx):
        super().__init__(timeout=60)
        self.events = events
        self.calendar_manager = calendar_manager
        self.db_manager = db_manager
        self.scheduler = scheduler
        self.bot = bot
        self.ctx = ctx
        
        # T·∫°o dropdown menu
        select_options = []
        for idx, event in enumerate(events, 1):
            title = event['summary']
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            if 'T' in start_time:
                dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                time_str = dt.strftime('%d/%m/%Y %H:%M')
            else:
                dt = datetime.strptime(start_time, '%Y-%m-%d')
                time_str = dt.strftime('%d/%m/%Y')
                
            label = f"{title} - {time_str}"
            if len(label) > 100:  # Discord c√≥ gi·ªõi h·∫°n ƒë·ªô d√†i label
                label = label[:97] + "..."
                
            select_options.append(
                discord.SelectOption(
                    label=label,
                    value=str(idx-1),
                    emoji="üìÖ"
                )
            )
        
        # Th√™m dropdown v√†o view
        self.select = Select(
            placeholder="Ch·ªçn s·ª± ki·ªán c·∫ßn x√≥a...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.select_callback
        self.add_item(self.select)
        
        # Th√™m n√∫t h·ªßy
        self.cancel_button = Button(
            label="H·ªßy",
            style=discord.ButtonStyle.secondary,
            emoji="‚ùå"
        )
        self.cancel_button.callback = self.cancel_callback
        self.add_item(self.cancel_button)
        
    async def select_callback(self, interaction: discord.Interaction):
        try:
            idx = int(self.select.values[0])
            event = self.events[idx]
            event_id = event['id']
            
            if await self.calendar_manager.delete_event(event_id):
                await self.db_manager.delete_event(event_id)
                await self.scheduler.remove_reminder(event_id)
                
                # Hi·ªán th√¥ng b√°o x√≥a th√†nh c√¥ng
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ x√≥a s·ª± ki·ªán",
                    description=f"**{event['summary']}**",
                    color=discord.Color.green()
                )
                
                # T·∫°o view m·ªõi ƒë·ªÉ h·ªèi ng∆∞·ªùi d√πng
                continue_view = ContinueDeleteView(self.bot, self.ctx)
                await interaction.response.edit_message(
                    embed=embed,
                    view=continue_view,
                    content="B·∫°n c√≥ mu·ªën x√≥a th√™m s·ª± ki·ªán kh√¥ng?"
                )
            else:
                await interaction.response.send_message(
                    "‚ùå Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.",
                    ephemeral=True
                )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )
    
    async def cancel_callback(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚ùå ƒê√£ h·ªßy x√≥a s·ª± ki·ªán",
            color=discord.Color.red()
        )
        await interaction.response.edit_message(embed=embed, view=None)

class ReminderSelectView(View):
    def __init__(self, bot, event_id, title, datetime_str):
        super().__init__(timeout=120)  # TƒÉng timeout l√™n v√¨ ng∆∞·ªùi d√πng c·∫ßn ch·ªçn 2 l·∫ßn
        self.bot = bot
        self.event_id = event_id
        self.title = title
        self.datetime_str = datetime_str
        self.first_reminder = None  # L∆∞u th·ªùi gian nh·∫Øc nh·ªü ƒë·∫ßu ti√™n
        
        # T·∫°o dropdown cho c√°c l·ª±a ch·ªçn th·ªùi gian
        self.remind_options = [
            ("V√†o l√∫c di·ªÖn ra", 0, "‚è∞"),
            ("5 ph√∫t tr∆∞·ªõc", 5, "5Ô∏è‚É£"),
            ("10 ph√∫t tr∆∞·ªõc", 10, "üîü"),
            ("15 ph√∫t tr∆∞·ªõc", 15, "üïí"),
            ("30 ph√∫t tr∆∞·ªõc", 30, "üïß"),
            ("1 ti·∫øng tr∆∞·ªõc", 60, "1Ô∏è‚É£"),
            ("2 ti·∫øng tr∆∞·ªõc", 120, "2Ô∏è‚É£"),
            ("5 ti·∫øng tr∆∞·ªõc", 300, "5Ô∏è‚É£"),
            ("1 ng√†y tr∆∞·ªõc", 1440, "üìÖ"),
            ("2 ng√†y tr∆∞·ªõc", 2880, "üìÜ")
        ]
        
        # T·∫°o dropdown ƒë·∫ßu ti√™n
        self.create_first_dropdown()

    def create_first_dropdown(self):
        self.clear_items()  # X√≥a t·∫•t c·∫£ items hi·ªán t·∫°i
        
        select_options = [
            discord.SelectOption(
                label=label,
                value=str(minutes),
                emoji=emoji
            ) for label, minutes, emoji in self.remind_options
        ]
        
        self.select = Select(
            placeholder="Ch·ªçn th·ªùi gian nh·∫Øc nh·ªü l·∫ßn 1...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.first_reminder_callback
        self.add_item(self.select)

    def create_second_dropdown(self):
        self.clear_items()  # X√≥a dropdown ƒë·∫ßu ti√™n
        
        # L·ªçc b·ªè option ƒë√£ ch·ªçn ·ªü l·∫ßn 1
        remaining_options = [
            (label, minutes, emoji) 
            for label, minutes, emoji in self.remind_options
            if minutes != self.first_reminder
        ]
        
        select_options = [
            discord.SelectOption(
                label=label,
                value=str(minutes),
                emoji=emoji
            ) for label, minutes, emoji in remaining_options
        ]
        
        self.select = Select(
            placeholder="Ch·ªçn th·ªùi gian nh·∫Øc nh·ªü l·∫ßn 2 (ho·∫∑c b·ªè qua)...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.second_reminder_callback
        self.add_item(self.select)
        
        # Th√™m n√∫t b·ªè qua
        skip_button = Button(
            label="Ch·ªâ nh·∫Øc 1 l·∫ßn",
            style=discord.ButtonStyle.secondary,
            emoji="‚è≠Ô∏è"
        )
        skip_button.callback = self.skip_callback
        self.add_item(skip_button)

    async def first_reminder_callback(self, interaction: discord.Interaction):
        try:
            self.first_reminder = int(self.select.values[0])
            
            # C·∫≠p nh·∫≠t embed ƒë·ªÉ hi·ªÉn th·ªã l·ª±a ch·ªçn th·ª© hai
            embed = discord.Embed(
                title="‚è∞ ƒê·∫∑t th·ªùi gian nh·∫Øc nh·ªü",
                description="B·∫°n mu·ªën ƒë∆∞·ª£c nh·∫Øc th√™m l·∫ßn n·ªØa kh√¥ng?",
                color=discord.Color.blue()
            )
            
            # T·∫°o dropdown cho l·∫ßn ch·ªçn th·ª© hai
            self.create_second_dropdown()
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )

    async def second_reminder_callback(self, interaction: discord.Interaction):
        try:
            second_reminder = int(self.select.values[0])
            await self.set_reminders(interaction, [self.first_reminder, second_reminder])
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )

    async def skip_callback(self, interaction: discord.Interaction):
        await self.set_reminders(interaction, [self.first_reminder])

    async def set_reminders(self, interaction, times):
        try:
            # S·∫Øp x·∫øp th·ªùi gian ƒë·ªÉ hi·ªÉn th·ªã theo th·ª© t·ª±
            times.sort(reverse=True)
            
            # ƒê·∫∑t t·∫•t c·∫£ c√°c nh·∫Øc nh·ªü
            for minutes in times:
                await self.bot.scheduler.schedule_reminder(
                    self.event_id,
                    self.title,
                    self.datetime_str,
                    minutes
                )
            
            # T·∫°o m√¥ t·∫£ v·ªÅ c√°c th·ªùi ƒëi·ªÉm nh·∫Øc
            reminders_text = []
            for minutes in times:
                if minutes == 0:
                    reminders_text.append("ngay l√∫c di·ªÖn ra")
                else:
                    reminders_text.append(f"{minutes} ph√∫t tr∆∞·ªõc khi di·ªÖn ra")
            
            reminder_desc = " v√† ".join(reminders_text)
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            embed = discord.Embed(
                title="‚è∞ ƒê√£ ƒë·∫∑t nh·∫Øc nh·ªü",
                description=f"S·ª± ki·ªán **{self.title}** s·∫Ω ƒë∆∞·ª£c nh·∫Øc {reminder_desc}",
                color=discord.Color.green()
            )
            await interaction.response.edit_message(embed=embed, view=None)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói khi ƒë·∫∑t nh·∫Øc nh·ªü: {str(e)}",
                ephemeral=True
            )

class CalendarBot(commands.Bot):
    def __init__(self):
        # C·∫≠p nh·∫≠t intents ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc member data
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True  # Th√™m quy·ªÅn ƒë·ªçc members
        intents.guilds = True   # Th√™m quy·ªÅn ƒë·ªçc guild data
        super().__init__(command_prefix=COMMAND_PREFIX, intents=intents)
        
        self.calendar_manager = CalendarManager()
        self.db_manager = DatabaseManager()
        self.scheduler = SchedulerManager(self)
        
    async def setup_hook(self):
        await self.add_commands()
        
    async def add_commands(self):
        @self.command(name='add')
        @commands.has_permissions(administrator=True)
        async def add_event(ctx, *, content=""):
            if not content:
                await ctx.send("‚ùå Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng:\n"
                             "`b!add <ti√™u ƒë·ªÅ> <dd/mm/yyyy HH:MM> <m√¥ t·∫£>`\n"
                             "V√≠ d·ª•: `b!add H·ªçp nh√≥m 25/02/2024 15:30 H·ªçp v·ªÅ d·ª± √°n m·ªõi`")
                return
                
            try:
                # T√°ch n·ªôi dung th√†nh c√°c ph·∫ßn
                parts = content.split(' ')
                if len(parts) < 4:  # √çt nh·∫•t ph·∫£i c√≥: ti√™u ƒë·ªÅ, ng√†y, gi·ªù, m√¥ t·∫£
                    await ctx.send("‚ùå Thi·∫øu th√¥ng tin! Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ, th·ªùi gian v√† m√¥ t·∫£")
                    return

                # L·∫•y ng√†y v√† gi·ªù (2 ph·∫ßn t·ª≠)
                date_idx = next(i for i, part in enumerate(parts) if '/' in part)
                title = ' '.join(parts[:date_idx])  # T·∫•t c·∫£ ph·∫ßn t·ª≠ tr∆∞·ªõc ng√†y l√† ti√™u ƒë·ªÅ
                date = parts[date_idx]
                time = parts[date_idx + 1]
                description = ' '.join(parts[date_idx + 2:])  # T·∫•t c·∫£ ph·∫ßn t·ª≠ sau gi·ªù l√† m√¥ t·∫£
                
                # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y gi·ªù
                try:
                    # Chuy·ªÉn t·ª´ dd/mm/yyyy sang yyyy-mm-dd
                    day, month, year = date.split('/')
                    formatted_date = f"{year}-{month}-{day}"
                    datetime_str = f"{formatted_date} {time}"
                    
                    event_id = await self.calendar_manager.add_event(title, datetime_str, description)
                    
                    if event_id:
                        await self.db_manager.save_event(event_id, title, datetime_str, description, str(ctx.author.id))  # Th√™m ID ng∆∞·ªùi t·∫°o
                        event_embed = discord.Embed(
                            title="‚úÖ S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o",
                            description=(
                                f"ID: {event_id}\n"
                                f"Ti√™u ƒë·ªÅ: {title}\n"
                                f"Th·ªùi gian: {date} {time}\n"
                                f"M√¥ t·∫£: {description}"
                            ),
                            color=discord.Color.green()
                        )
                        await ctx.send(embed=event_embed)
                        
                        # Hi·ªÉn th·ªã l·ª±a ch·ªçn th·ªùi gian nh·∫Øc nh·ªü
                        remind_embed = discord.Embed(
                            title="‚è∞ ƒê·∫∑t th·ªùi gian nh·∫Øc nh·ªü",
                            description="B·∫°n mu·ªën ƒë∆∞·ª£c nh·∫Øc nh·ªü tr∆∞·ªõc bao l√¢u?",
                            color=discord.Color.blue()
                        )
                        view = ReminderSelectView(self, event_id, title, datetime_str)
                        await ctx.send(embed=remind_embed, view=view)
                    else:
                        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.")
                except ValueError:
                    await ctx.send("‚ùå ƒê·ªãnh d·∫°ng ng√†y gi·ªù kh√¥ng h·ª£p l·ªá!\n"
                                 "Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: `dd/mm/yyyy HH:MM`")
                    return
                    
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói: {str(e)}")

        @self.command(name='list')  # ƒê·ªïi t√™n t·ª´ events th√†nh list
        async def list_events(ctx):
            events = await self.calendar_manager.list_events()
            if not events:
                await ctx.send("Kh√¥ng c√≥ s·ª± ki·ªán n√†o s·∫Øp t·ªõi.")
                return

            # L·ªçc b·ªè c√°c s·ª± ki·ªán sinh nh·∫≠t
            filtered_events = [
                event for event in events 
                if not "birthday" in event.get('summary', '').lower() 
                and not "sinh nh·∫≠t" in event.get('summary', '').lower()
            ]

            if not filtered_events:
                await ctx.send("Kh√¥ng c√≥ s·ª± ki·ªán n√†o s·∫Øp t·ªõi.")
                return

            # T·∫°o b·∫£ng s·ª± ki·ªán
            embed = discord.Embed(
                title="üìÖ Danh s√°ch s·ª± ki·ªán s·∫Øp t·ªõi",
                color=discord.Color.blue()
            )

            # T·∫°o danh s√°ch theo d·∫°ng list
            description = ""
            for idx, event in enumerate(filtered_events, 1):
                title = event['summary']
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                if 'T' in start_time:
                    dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                    time_str = dt.strftime('%d/%m/%Y %H:%M')
                else:
                    dt = datetime.strptime(start_time, '%Y-%m-%d')
                    time_str = dt.strftime('%d/%m/%Y')
                
                desc = event.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')
                if len(desc) > 50:
                    desc = desc[:47] + "..."

                description += f"**{idx}. {title}**\n"
                description += f"‚è∞ {time_str}\n"
                description += f"üìù {desc}\n\n"

            embed.description = description
            embed.set_footer(text="üí° S·ª≠ d·ª•ng b!add ƒë·ªÉ th√™m s·ª± ki·ªán m·ªõi")
            
            await ctx.send(embed=embed)

        @self.command(name='del')
        @commands.has_permissions(administrator=True)
        async def delete_event(ctx):
            """X√≥a s·ª± ki·ªán b·∫±ng dropdown menu"""
            events = await self.calendar_manager.list_events()
            
            # L·ªçc b·ªè c√°c s·ª± ki·ªán sinh nh·∫≠t
            filtered_events = [
                event for event in events 
                if not "birthday" in event.get('summary', '').lower() 
                and not "sinh nh·∫≠t" in event.get('summary', '').lower()
            ]

            if not filtered_events:
                await ctx.send("‚ùå Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë·ªÉ x√≥a.")
                return

            embed = discord.Embed(
                title="üóëÔ∏è X√≥a s·ª± ki·ªán",
                description="Ch·ªçn s·ª± ki·ªán b·∫°n mu·ªën x√≥a t·ª´ danh s√°ch b√™n d∆∞·ªõi:",
                color=discord.Color.blue()
            )
            
            # T·∫°o view v·ªõi dropdown v√† button, truy·ªÅn th√™m bot v√† ctx
            view = DeleteView(
                filtered_events,
                self.calendar_manager,
                self.db_manager,
                self.scheduler,
                self,
                ctx
            )
            
            await ctx.send(embed=embed, view=view)

        @self.command(name='test')
        @commands.has_permissions(administrator=True)
        async def add_test_event(ctx):
            try:
                # T·∫°o s·ª± ki·ªán test cho 15 ph√∫t sau
                now = datetime.now()
                test_time = now + timedelta(minutes=15)
                time_str = test_time.strftime('%Y-%m-%d %H:%M')
                
                test_data = {
                    'title': 'S·ª± ki·ªán Test',
                    'datetime': time_str,
                    'description': 'ƒê√¢y l√† s·ª± ki·ªán test t·ª± ƒë·ªông'
                }
                
                event_id = await self.calendar_manager.add_event(
                    test_data['title'],
                    test_data['datetime'],
                    test_data['description']
                )
                
                if event_id:
                    await self.db_manager.save_event(
                        event_id,
                        test_data['title'],
                        test_data['datetime'],
                        test_data['description'],
                        str(ctx.author.id)  # Th√™m ID ng∆∞·ªùi t·∫°o
                    )
                    
                    embed = discord.Embed(
                        title="S·ª± ki·ªán Test ƒë√£ ƒë∆∞·ª£c t·∫°o",
                        description=(
                            f"ID: {event_id}\n"
                            f"Ti√™u ƒë·ªÅ: {test_data['title']}\n"
                            f"Th·ªùi gian: {test_data['datetime']}\n"
                            f"M√¥ t·∫£: {test_data['description']}"
                        ),
                        color=discord.Color.green()
                    )
                    await ctx.send(embed=embed)
                    await self.scheduler.schedule_reminder(
                        event_id,
                        test_data['title'],
                        test_data['datetime']
                    )
                else:
                    await ctx.send("Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán test. Vui l√≤ng th·ª≠ l·∫°i.")
            except Exception as e:
                await ctx.send(f"L·ªói khi t·∫°o s·ª± ki·ªán test: {str(e)}")

        @self.command(name='helps')
        async def show_help(ctx):
            embed = discord.Embed(
                title="üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot",
                description="Danh s√°ch c√°c l·ªánh c√≥ s·∫µn:",
                color=discord.Color.blue()
            )
            
            commands_help = {
                "b!add": {
                    "format": "b!add <ti√™u ƒë·ªÅ> <dd/mm/yyyy HH:MM> <m√¥ t·∫£>",
                    "example": "b!add H·ªçp nh√≥m 25/02/2024 15:30 H·ªçp v·ªÅ d·ª± √°n m·ªõi",
                    "desc": "Th√™m s·ª± ki·ªán m·ªõi v√†o l·ªãch"
                },
                "b!list": {  # ƒê·ªïi t√™n trong help
                    "format": "b!list",
                    "example": "b!list",
                    "desc": "Xem danh s√°ch c√°c s·ª± ki·ªán s·∫Øp t·ªõi d∆∞·ªõi d·∫°ng b·∫£ng"
                },
                "b!del": {  # C·∫≠p nh·∫≠t t√™n l·ªánh trong help
                    "format": "b!del",
                    "example": "b!del",
                    "desc": "Hi·ªán danh s√°ch v√† x√≥a s·ª± ki·ªán theo l·ª±a ch·ªçn"
                },
                "b!test": {
                    "format": "b!test",
                    "example": "b!test",
                    "desc": "T·∫°o s·ª± ki·ªán test (15 ph√∫t sau th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)"
                }
            }
            
            for cmd, info in commands_help.items():
                embed.add_field(
                    name=f"üîπ {cmd}",
                    value=f"M√¥ t·∫£: {info['desc']}\n"
                          f"ƒê·ªãnh d·∫°ng: `{info['format']}`\n"
                          f"V√≠ d·ª•: `{info['example']}`",
                    inline=False
                )
            
            embed.set_footer(text="üí° C√°c l·ªánh add v√† del y√™u c·∫ßu quy·ªÅn Administrator")
            await ctx.send(embed=embed)

    async def on_ready(self):
        print(f'{self.user} ƒë√£ s·∫µn s√†ng!')
        await self.scheduler.start()

def run_bot():
    bot = CalendarBot()
    bot.run(DISCORD_TOKEN)

if __name__ == "__main__":
    run_bot()
