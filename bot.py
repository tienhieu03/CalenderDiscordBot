import discord
from discord.ext import commands
import asyncio
from datetime import datetime, timedelta
import importlib.util
import sys
import os
from pathlib import Path
from calendar_manager import CalendarManager
from config import DISCORD_TOKEN, COMMAND_PREFIX
from database import DatabaseManager
from scheduler import SchedulerManager
from discord.ui import Select, View, Button

class ContinueDeleteView(View):
    def __init__(self, bot, ctx):
        super().__init__(timeout=30)
        self.bot = bot
        self.ctx = ctx
        
        # Th√™m n√∫t C√≥
        self.yes_button = Button(
            label="C√≥",
            style=discord.ButtonStyle.green,
            emoji="‚úÖ"
        )
        self.yes_button.callback = self.yes_callback
        self.add_item(self.yes_button)
        
        # Th√™m n√∫t Kh√¥ng
        self.no_button = Button(
            label="Kh√¥ng",
            style=discord.ButtonStyle.red,
            emoji="‚ùå"
        )
        self.no_button.callback = self.no_callback
        self.add_item(self.no_button)
    
    async def yes_callback(self, interaction: discord.Interaction):
        await interaction.message.delete()  # X√≥a message h·ªèi
        # T·∫°o l·∫°i menu x√≥a s·ª± ki·ªán m·ªõi
        await self.bot.get_command('del').callback(self.ctx)
    
    async def no_callback(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚úÖ Ho√†n t·∫•t x√≥a s·ª± ki·ªán",
            color=discord.Color.green()
        )
        await interaction.response.edit_message(embed=embed, view=None)

class DeleteView(View):
    def __init__(self, events, calendar_manager, db_manager, scheduler, bot, ctx):
        super().__init__(timeout=60)
        self.events = events
        self.calendar_manager = calendar_manager
        self.db_manager = db_manager
        self.scheduler = scheduler
        self.bot = bot
        self.ctx = ctx
        
        # T·∫°o dropdown menu
        select_options = []
        for idx, event in enumerate(events, 1):
            title = event['summary']
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            if 'T' in start_time:
                dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                time_str = dt.strftime('%d/%m/%Y %H:%M')
            else:
                dt = datetime.strptime(start_time, '%Y-%m-%d')
                time_str = dt.strftime('%d/%m/%Y')
                
            label = f"{title} - {time_str}"
            if len(label) > 100:  # Discord c√≥ gi·ªõi h·∫°n ƒë·ªô d√†i label
                label = label[:97] + "..."
                
            select_options.append(
                discord.SelectOption(
                    label=label,
                    value=str(idx-1),
                    emoji="üìÖ"
                )
            )
        
        # Th√™m dropdown v√†o view
        self.select = Select(
            placeholder="Ch·ªçn s·ª± ki·ªán c·∫ßn x√≥a...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.select_callback
        self.add_item(self.select)
        
        # Th√™m n√∫t h·ªßy
        self.cancel_button = Button(
            label="H·ªßy",
            style=discord.ButtonStyle.secondary,
            emoji="‚ùå"
        )
        self.cancel_button.callback = self.cancel_callback
        self.add_item(self.cancel_button)
        
    async def select_callback(self, interaction: discord.Interaction):
        try:
            idx = int(self.select.values[0])
            event = self.events[idx]
            event_id = event['id']
            
            if await self.calendar_manager.delete_event(event_id):
                self.db_manager.delete_event(event_id)
                await self.scheduler.remove_reminder(event_id)
                
                # Hi·ªán th√¥ng b√°o x√≥a th√†nh c√¥ng
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ x√≥a s·ª± ki·ªán",
                    description=f"**{event['summary']}**",
                    color=discord.Color.green()
                )
                
                # T·∫°o view m·ªõi ƒë·ªÉ h·ªèi ng∆∞·ªùi d√πng
                continue_view = ContinueDeleteView(self.bot, self.ctx)
                await interaction.response.edit_message(
                    embed=embed,
                    view=continue_view,
                    content="B·∫°n c√≥ mu·ªën x√≥a th√™m s·ª± ki·ªán kh√¥ng?"
                )
            else:
                await interaction.response.send_message(
                    "‚ùå Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.",
                    ephemeral=True
                )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )
    
    async def cancel_callback(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚ùå ƒê√£ h·ªßy x√≥a s·ª± ki·ªán",
            color=discord.Color.red()
        )
        await interaction.response.edit_message(embed=embed, view=None)

class ReminderSelectView(View):
    def __init__(self, bot, event_id, title, datetime_str):
        super().__init__(timeout=120)
        self.bot = bot
        self.event_id = event_id
        self.title = title
        self.datetime_str = datetime_str
        self.first_reminder = None
        self.repeat_times = 1  # M·∫∑c ƒë·ªãnh nh·∫Øc 1 l·∫ßn
        
        # ƒê·ªãnh nghƒ©a c·∫£ remind_options v√† repeat_options
        self.remind_options = [
            ("V√†o l√∫c di·ªÖn ra", 0, "‚è∞"),
            ("5 ph√∫t tr∆∞·ªõc", 5, "5Ô∏è‚É£"),
            ("10 ph√∫t tr∆∞·ªõc", 10, "üîü"),
            ("15 ph√∫t tr∆∞·ªõc", 15, "üïí"),
            ("30 ph√∫t tr∆∞·ªõc", 30, "üïß"),
            ("1 ti·∫øng tr∆∞·ªõc", 60, "1Ô∏è‚É£"),
            ("2 ti·∫øng tr∆∞·ªõc", 120, "2Ô∏è‚É£"),
            ("5 ti·∫øng tr∆∞·ªõc", 300, "5Ô∏è‚É£"),
            ("1 ng√†y tr∆∞·ªõc", 1440, "üìÖ"),
            ("2 ng√†y tr∆∞·ªõc", 2880, "üìÜ")
        ]
        
        self.repeat_options = [
            ("Nh·∫Øc 1 l·∫ßn", 1, "1Ô∏è‚É£"),
            ("Nh·∫Øc 2 l·∫ßn", 2, "2Ô∏è‚É£"),
            ("Nh·∫Øc 3 l·∫ßn", 3, "3Ô∏è‚É£"),
            ("Nh·∫Øc 5 l·∫ßn", 5, "5Ô∏è‚É£")
        ]
        
        # T·∫°o dropdown ƒë·∫ßu ti√™n cho th·ªùi gian
        self.create_time_dropdown()

    def create_time_dropdown(self):
        self.clear_items()
        
        select_options = [
            discord.SelectOption(
                label=label,
                value=str(minutes),
                emoji=emoji
            ) for label, minutes, emoji in self.remind_options
        ]
        
        self.select = Select(
            placeholder="Ch·ªçn th·ªùi gian nh·∫Øc nh·ªü l·∫ßn 1...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.time_callback
        self.add_item(self.select)

    async def time_callback(self, interaction: discord.Interaction):
        try:
            self.first_reminder = int(self.select.values[0])
            
            # Sau khi ch·ªçn th·ªùi gian, hi·ªÉn th·ªã l·ª±a ch·ªçn s·ªë l·∫ßn nh·∫Øc
            embed = discord.Embed(
                title="üîÑ S·ªë l·∫ßn nh·∫Øc nh·ªü",
                description="B·∫°n mu·ªën nh·∫Øc nh·ªü m·∫•y l·∫ßn?\n(M·ªói l·∫ßn c√°ch nhau 15 gi√¢y)",  # C·∫≠p nh·∫≠t m√¥ t·∫£
                color=discord.Color.blue()
            )
            
            # T·∫°o dropdown cho s·ªë l·∫ßn nh·∫Øc
            self.create_repeat_dropdown()
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )

    def create_repeat_dropdown(self):
        self.clear_items()
        
        select_options = [
            discord.SelectOption(
                label=label,
                value=str(times),
                emoji=emoji
            ) for label, times, emoji in self.repeat_options
        ]
        
        self.select = Select(
            placeholder="Ch·ªçn s·ªë l·∫ßn nh·∫Øc...",
            options=select_options,
            min_values=1,
            max_values=1
        )
        self.select.callback = self.repeat_callback
        self.add_item(self.select)

    async def repeat_callback(self, interaction: discord.Interaction):
        try:
            self.repeat_times = int(self.select.values[0])
            await self.schedule_reminder(interaction)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói: {str(e)}",
                ephemeral=True
            )

    async def schedule_reminder(self, interaction):
        try:
            await self.bot.scheduler.schedule_reminder(
                self.event_id,
                self.title,
                self.datetime_str,
                self.first_reminder,
                self.repeat_times
            )
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            reminder_text = "ngay l√∫c di·ªÖn ra" if self.first_reminder == 0 else f"{self.first_reminder} ph√∫t tr∆∞·ªõc khi di·ªÖn ra"
            embed = discord.Embed(
                title="‚è∞ ƒê√£ ƒë·∫∑t nh·∫Øc nh·ªü",
                description=f"S·ª± ki·ªán **{self.title}** s·∫Ω ƒë∆∞·ª£c nh·∫Øc {reminder_text}\n"
                           f"S·ªë l·∫ßn nh·∫Øc: **{self.repeat_times}** l·∫ßn",
                color=discord.Color.green()
            )
            await interaction.response.edit_message(embed=embed, view=None)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå L·ªói khi ƒë·∫∑t nh·∫Øc nh·ªü: {str(e)}",
                ephemeral=True
            )

class CalendarBot(commands.Bot):
    def __init__(self):
        # C·∫≠p nh·∫≠t intents ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc member data
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True  # Th√™m quy·ªÅn ƒë·ªçc members
        intents.guilds = True   # Th√™m quy·ªÅn ƒë·ªçc guild data
        
        # S·ª≠ d·ª•ng case_insensitive=True ƒë·ªÉ b·ªè qua hoa th∆∞·ªùng trong prefix
        super().__init__(
            command_prefix=COMMAND_PREFIX, 
            intents=intents,
            case_insensitive=True
        )
        
        self.calendar_manager = CalendarManager()
        self.db_manager = DatabaseManager()
        self.scheduler = SchedulerManager(self)
        
    async def setup_hook(self):
        await self.add_commands()
        
    async def add_commands(self):
        @self.command(name='add')
        @commands.has_permissions(administrator=True)
        async def add_event(ctx, *, content=""):
            # Ki·ªÉm tra calendar id c·ªßa user
            calendar_id = self.db_manager.get_user_calendar(str(ctx.author.id))
            if not calendar_id:
                embed = discord.Embed(
                    title="‚ùå Ch∆∞a c√†i ƒë·∫∑t Calendar",
                    description="B·∫°n c·∫ßn c√†i ƒë·∫∑t Calendar ID tr∆∞·ªõc khi th√™m s·ª± ki·ªán. S·ª≠ d·ª•ng l·ªánh:\n`b!setcalendar your.email@gmail.com`",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return

            if not content:
                await ctx.send("‚ùå Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng:\n"
                             "`b!add <ti√™u ƒë·ªÅ> <dd/mm/yyyy HH:MM> [m√¥ t·∫£]`\n"
                             "V√≠ d·ª•: `b!add H·ªçp nh√≥m 25/02/2024 15:30 H·ªçp v·ªÅ d·ª± √°n m·ªõi`")
                return
                
            try:
                # T√°ch n·ªôi dung th√†nh c√°c ph·∫ßn
                parts = content.split(' ')
                if len(parts) < 3:  # Ch·ªâ y√™u c·∫ßu ti√™u ƒë·ªÅ, ng√†y v√† gi·ªù
                    await ctx.send("‚ùå Thi·∫øu th√¥ng tin! Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† th·ªùi gian")
                    return

                # L·∫•y ng√†y v√† gi·ªù (2 ph·∫ßn t·ª≠)
                date_idx = next(i for i, part in enumerate(parts) if '/' in part)
                title = ' '.join(parts[:date_idx])  # T·∫•t c·∫£ ph·∫ßn t·ª≠ tr∆∞·ªõc ng√†y l√† ti√™u ƒë·ªÅ
                date = parts[date_idx]
                time = parts[date_idx + 1]
                description = ' '.join(parts[date_idx + 2:]) if len(parts) > date_idx + 2 else "Kh√¥ng c√≥ m√¥ t·∫£"
                
                # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y gi·ªù
                try:
                    # Chuy·ªÉn t·ª´ dd/mm/yyyy sang yyyy-mm-dd
                    day, month, year = date.split('/')
                    formatted_date = f"{year}-{month}-{day}"
                    datetime_str = f"{formatted_date} {time}"
                    
                    event_id = await self.calendar_manager.add_event(title, datetime_str, description)
                    
                    if event_id:
                        self.db_manager.save_event(event_id, title, datetime_str, description, str(ctx.author.id))  # Th√™m ID ng∆∞·ªùi t·∫°o
                        event_embed = discord.Embed(
                            title="‚úÖ S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o",
                            description=(
                                f"ID: {event_id}\n"
                                f"Ti√™u ƒë·ªÅ: {title}\n"
                                f"Th·ªùi gian: {date} {time}\n"
                                f"M√¥ t·∫£: {description}"
                            ),
                            color=discord.Color.green()
                        )
                        await ctx.send(embed=event_embed)
                        
                        # Hi·ªÉn th·ªã l·ª±a ch·ªçn th·ªùi gian nh·∫Øc nh·ªü
                        remind_embed = discord.Embed(
                            title="‚è∞ ƒê·∫∑t th·ªùi gian nh·∫Øc nh·ªü",
                            description="B·∫°n mu·ªën ƒë∆∞·ª£c nh·∫Øc nh·ªü tr∆∞·ªõc bao l√¢u?",
                            color=discord.Color.blue()
                        )
                        view = ReminderSelectView(self, event_id, title, datetime_str)
                        await ctx.send(embed=remind_embed, view=view)
                    else:
                        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.")
                except ValueError:
                    await ctx.send("‚ùå ƒê·ªãnh d·∫°ng ng√†y gi·ªù kh√¥ng h·ª£p l·ªá!\n"
                                 "Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: `dd/mm/yyyy HH:MM`")
                    return
                    
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói: {str(e)}")

        @self.command(name='list')  # ƒê·ªïi t√™n t·ª´ events th√†nh list
        async def list_events(ctx):
            events = await self.calendar_manager.list_events()
            if not events:
                await ctx.send("Kh√¥ng c√≥ s·ª± ki·ªán n√†o s·∫Øp t·ªõi.")
                return

            # L·ªçc b·ªè c√°c s·ª± ki·ªán sinh nh·∫≠t
            filtered_events = [
                event for event in events 
                if not "birthday" in event.get('summary', '').lower() 
                and not "sinh nh·∫≠t" in event.get('summary', '').lower()
            ]

            if not filtered_events:
                await ctx.send("Kh√¥ng c√≥ s·ª± ki·ªán n√†o s·∫Øp t·ªõi.")
                return

            # T·∫°o b·∫£ng s·ª± ki·ªán
            embed = discord.Embed(
                title="üìÖ Danh s√°ch s·ª± ki·ªán s·∫Øp t·ªõi",
                color=discord.Color.blue()
            )

            # T·∫°o danh s√°ch theo d·∫°ng list
            description = ""
            for idx, event in enumerate(filtered_events, 1):
                title = event['summary']
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                if 'T' in start_time:
                    dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                    time_str = dt.strftime('%d/%m/%Y %H:%M')
                else:
                    dt = datetime.strptime(start_time, '%Y-%m-%d')
                    time_str = dt.strftime('%d/%m/%Y')
                
                desc = event.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')
                if len(desc) > 50:
                    desc = desc[:47] + "..."
                
                description += f"**{idx}. {title}**\n"
                description += f"‚è∞ {time_str}\n"
                description += f"üìù {desc}\n\n"

            embed.description = description
            embed.set_footer(text="üí° S·ª≠ d·ª•ng b!add ƒë·ªÉ th√™m s·ª± ki·ªán m·ªõi")
            
            await ctx.send(embed=embed)

        @self.command(name='del')
        @commands.has_permissions(administrator=True)
        async def delete_event(ctx):
            """X√≥a s·ª± ki·ªán b·∫±ng dropdown menu"""
            events = await self.calendar_manager.list_events()
            
            # L·ªçc b·ªè c√°c s·ª± ki·ªán sinh nh·∫≠t
            filtered_events = [
                event for event in events 
                if not "birthday" in event.get('summary', '').lower() 
                and not "sinh nh·∫≠t" in event.get('summary', '').lower()
            ]

            if not filtered_events:
                await ctx.send("‚ùå Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë·ªÉ x√≥a.")
                return

            embed = discord.Embed(
                title="üóëÔ∏è X√≥a s·ª± ki·ªán",
                description="Ch·ªçn s·ª± ki·ªán b·∫°n mu·ªën x√≥a t·ª´ danh s√°ch b√™n d∆∞·ªõi:",
                color=discord.Color.blue()
            )
            
            # T·∫°o view v·ªõi dropdown v√† button, truy·ªÅn th√™m bot v√† ctx
            view = DeleteView(
                filtered_events,
                self.calendar_manager,
                self.db_manager,
                self.scheduler,
                self,
                ctx
            )
            
            await ctx.send(embed=embed, view=view)

        @self.command(name='test')
        @commands.has_permissions(administrator=True)
        async def add_test_event(ctx):
            # Ki·ªÉm tra calendar id c·ªßa user
            calendar_id = self.db_manager.get_user_calendar(str(ctx.author.id))
            if not calendar_id:
                embed = discord.Embed(
                    title="‚ùå Ch∆∞a c√†i ƒë·∫∑t Calendar",
                    description="B·∫°n c·∫ßn c√†i ƒë·∫∑t Calendar ID tr∆∞·ªõc khi th√™m s·ª± ki·ªán. S·ª≠ d·ª•ng l·ªánh:\n`b!setcalendar your.email@gmail.com`",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return

            try:
                # T·∫°o s·ª± ki·ªán test cho 15 ph√∫t sau
                now = datetime.now()
                test_time = now + timedelta(minutes=15)
                time_str = test_time.strftime('%Y-%m-%d %H:%M')
                
                test_data = {
                    'title': 'S·ª± ki·ªán Test',
                    'datetime': time_str,
                    'description': 'ƒê√¢y l√† s·ª± ki·ªán test t·ª± ƒë·ªông'
                }
                
                event_id = await self.calendar_manager.add_event(
                    test_data['title'],
                    test_data['datetime'],
                    test_data['description']
                )
                
                if event_id:
                    self.db_manager.save_event(
                        event_id,
                        test_data['title'],
                        test_data['datetime'],
                        test_data['description'],
                        str(ctx.author.id)  # Th√™m ID ng∆∞·ªùi t·∫°o
                    )
                    
                    embed = discord.Embed(
                        title="S·ª± ki·ªán Test ƒë√£ ƒë∆∞·ª£c t·∫°o",
                        description=(
                            f"ID: {event_id}\n"
                            f"Ti√™u ƒë·ªÅ: {test_data['title']}\n"
                            f"Th·ªùi gian: {test_data['datetime']}\n"
                            f"M√¥ t·∫£: {test_data['description']}"
                        ),
                        color=discord.Color.green()
                    )
                    await ctx.send(embed=embed)
                    await self.scheduler.schedule_reminder(
                        event_id,
                        test_data['title'],
                        test_data['datetime']
                    )
                else:
                    await ctx.send("Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán test. Vui l√≤ng th·ª≠ l·∫°i.")
            except Exception as e:
                await ctx.send(f"L·ªói khi t·∫°o s·ª± ki·ªán test: {str(e)}")

        @self.command(name='setcalendar')
        async def set_calendar(ctx, calendar_id=None):
            """C√†i ƒë·∫∑t Calendar ID cho ng∆∞·ªùi d√πng"""
            if not calendar_id:
                await ctx.send("‚ùå Vui l√≤ng nh·∫≠p Calendar ID! V√≠ d·ª•:\n`b!setcalendar your.email@gmail.com`")
                return

            try:
                # L∆∞u calendar ID (kh√¥ng c·∫ßn await)
                self.db_manager.save_user_calendar(str(ctx.author.id), calendar_id)
                
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ c√†i ƒë·∫∑t Calendar",
                    description=f"Calendar ID c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh:\n`{calendar_id}`",
                    color=discord.Color.green()
                )
                embed.set_footer(text="üí° Bot s·∫Ω s·ª≠ d·ª•ng calendar n√†y cho c√°c s·ª± ki·ªán c·ªßa b·∫°n")
                await ctx.send(embed=embed)
                
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói khi c√†i ƒë·∫∑t calendar: {str(e)}")

        @self.command(name='mycalendar')
        async def show_calendar(ctx):
            """Hi·ªÉn th·ªã Calendar ID hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng"""
            try:
                calendar_id = self.db_manager.get_user_calendar(str(ctx.author.id))
                if (calendar_id):
                    embed = discord.Embed(
                        title="üìÖ Calendar c·ªßa b·∫°n",
                        description=f"Calendar ID hi·ªán t·∫°i: `{calendar_id}`",
                        color=discord.Color.blue()
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå Ch∆∞a c√†i ƒë·∫∑t Calendar",
                        description="B·∫°n ch∆∞a c√†i ƒë·∫∑t Calendar ID. S·ª≠ d·ª•ng l·ªánh:\n`b!setcalendar your.email@gmail.com`",
                        color=discord.Color.red()
                    )
                await ctx.send(embed=embed)
                
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói khi ki·ªÉm tra calendar: {str(e)}")

        @self.command(name='helps')
        async def show_help(ctx):
            embed = discord.Embed(
                title="üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot",
                description="Bot h·ªó tr·ª£ c·∫£ prefix ch·ªØ hoa (B!) v√† ch·ªØ th∆∞·ªùng (b!)\nDanh s√°ch c√°c l·ªánh c√≥ s·∫µn:",
                color=discord.Color.blue()
            )
            
            commands_help = {
                "add": {
                    "format": "<B! ho·∫∑c b!>add <ti√™u ƒë·ªÅ> <dd/mm/yyyy HH:MM> [m√¥ t·∫£]",
                    "example": "B!add H·ªçp nh√≥m 25/02/2024 15:30 H·ªçp v·ªÅ d·ª± √°n m·ªõi",
                    "desc": "Th√™m s·ª± ki·ªán m·ªõi v√†o l·ªãch (m√¥ t·∫£ l√† t√πy ch·ªçn)"
                },
                "list": {
                    "format": "<B! ho·∫∑c b!>list",
                    "example": "B!list",
                    "desc": "Xem danh s√°ch c√°c s·ª± ki·ªán s·∫Øp t·ªõi"
                },
                "del": {
                    "format": "<B! ho·∫∑c b!>del",
                    "example": "B!del",
                    "desc": "Hi·ªán danh s√°ch v√† x√≥a s·ª± ki·ªán theo l·ª±a ch·ªçn"
                },
                "test": {
                    "format": "<B! ho·∫∑c b!>test",
                    "example": "B!test",
                    "desc": "T·∫°o s·ª± ki·ªán test (15 ph√∫t sau th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)"
                },
                "setcalendar": {
                    "format": "<B! ho·∫∑c b!>setcalendar <calendar_id>",
                    "example": "B!setcalendar your.email@gmail.com",
                    "desc": "C√†i ƒë·∫∑t Calendar ID c·ªßa b·∫°n"
                },
                "mycalendar": {
                    "format": "<B! ho·∫∑c b!>mycalendar",
                    "example": "B!mycalendar",
                    "desc": "Xem Calendar ID hi·ªán t·∫°i c·ªßa b·∫°n"
                }
            }
            
            for cmd, info in commands_help.items():
                embed.add_field(
                    name=f"üîπ L·ªánh: {cmd}",
                    value=f"M√¥ t·∫£: {info['desc']}\n"
                          f"ƒê·ªãnh d·∫°ng: `{info['format']}`\n"
                          f"V√≠ d·ª•: `{info['example']}`",
                    inline=False
                )
            
            embed.set_footer(text="üí° C√°c l·ªánh add v√† del y√™u c·∫ßu quy·ªÅn Administrator\n"
                                "üìù Bot h·ªó tr·ª£ c·∫£ prefix B! v√† b!")
            await ctx.send(embed=embed)

    async def on_ready(self):
        print(f'{self.user} ƒë√£ s·∫µn s√†ng!')
        await self.scheduler.start()

def run_bot():
    bot = CalendarBot()
    bot.run(DISCORD_TOKEN)

if __name__ == "__main__":
    run_bot()